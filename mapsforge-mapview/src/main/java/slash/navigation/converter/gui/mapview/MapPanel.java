package slash.navigation.converter.gui.mapview;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;
import java.util.prefs.Preferences;

import static com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER;
import static com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH;
import static com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW;
import static com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK;
import static java.awt.event.ItemEvent.SELECTED;

public class MapPanel {
    private static final Preferences preferences = Preferences.userNodeForPackage(MapPanel.class);
    private static final String MAP_FILE_PREFERENCE = "mapFile";
    private static final String THEME_FILE_PREFERENCE = "themeFile";

    private JComboBox comboBoxMap;
    private JComboBox comboBoxTheme;
    private JPanel component;
    private JPanel mapViewPanel;

    public MapPanel(final MapsforgeMapView mapsforgeMapView, List<String> mapFileNames, List<String> themeFileNames, AwtGraphicMapView awtGraphicMapView) {
        comboBoxMap.setModel(new DefaultComboBoxModel(mapFileNames.toArray()));
        comboBoxMap.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() != SELECTED)
                    return;
                String mapFileName = (String) e.getItem();
                mapsforgeMapView.setMapFile(mapFileName, (String) comboBoxTheme.getSelectedItem());
                preferences.put(MAP_FILE_PREFERENCE, mapFileName);
            }
        });
        String mapFileName = preferences.get(MAP_FILE_PREFERENCE, "germany.map");
        comboBoxMap.setSelectedItem(mapFileName);

        comboBoxTheme.setModel(new DefaultComboBoxModel(themeFileNames.toArray()));
        comboBoxTheme.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() != SELECTED)
                    return;
                String themeFileName = (String) e.getItem();
                mapsforgeMapView.setMapFile((String) comboBoxMap.getSelectedItem(), themeFileName);
                preferences.put(THEME_FILE_PREFERENCE, themeFileName);
            }
        });
        String themeFileName = preferences.get(THEME_FILE_PREFERENCE, "Osmarenderer");
        comboBoxTheme.setSelectedItem(themeFileName);

        mapViewPanel.add(awtGraphicMapView, new GridConstraints(0, 0, 1, 1, ANCHOR_CENTER, FILL_BOTH,
                SIZEPOLICY_CAN_SHRINK | SIZEPOLICY_CAN_GROW, SIZEPOLICY_CAN_SHRINK | SIZEPOLICY_CAN_GROW,
                new Dimension(0, 0), new Dimension(0, 0), new Dimension(2000, 2640), 0, true));

        mapsforgeMapView.setMapFile(mapFileName, themeFileName);
    }

    public Component getComponent() {
        return component;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        component = new JPanel();
        component.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 5, new Insets(2, 2, 0, 4), -1, -1));
        component.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Map:");
        panel1.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        comboBoxMap = new JComboBox();
        panel1.add(comboBoxMap, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Theme:");
        panel1.add(label2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        comboBoxTheme = new JComboBox();
        panel1.add(comboBoxTheme, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        mapViewPanel = new JPanel();
        mapViewPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        component.add(mapViewPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return component;
    }
}
